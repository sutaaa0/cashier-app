generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  level    String
  penjualan Penjualan[] 
}

model Pelanggan {
  pelangganId  Int         @id @default(autoincrement())
  nama         String      @default("Guest")
  alamat       String?
  nomorTelepon String?
  points       Int         @default(0)
  penjualan    Penjualan[]
  createdAt    DateTime    @default(now())
}

model Guest {
  guestId   Int         @id @default(autoincrement())
  penjualan Penjualan[]
}

model Penjualan {
  penjualanId      Int               @id @default(autoincrement())
  tanggalPenjualan DateTime          @default(now())
  total_harga      Float
  pelangganId      Int?
  guestId          Int?
  uangMasuk        Int?            // Field untuk menyimpan jumlah uang yang diterima
  kembalian        Int?            // Field untuk menyimpan jumlah kembalian yang diberikan
  userId           Int               
  pelanggan        Pelanggan?        @relation(fields: [pelangganId], references: [pelangganId])
  guest            Guest?            @relation(fields: [guestId], references: [guestId])
  user             User              @relation(fields: [userId], references: [id]) // Relasi dengan user
  detailPenjualan  DetailPenjualan[] 
}

model DetailPenjualan {
  detailId    Int       @id @default(autoincrement())
  penjualanId Int
  penjualan   Penjualan @relation(fields: [penjualanId], references: [penjualanId])
  produkId    Int
  produk      Produk    @relation(fields: [produkId], references: [produkId], onDelete: Restrict)
  kuantitas   Int
  subtotal    Int
}

model Kategori {
  kategoriId Int      @id @default(autoincrement())
  nama       String   @unique
  icon       String   
  produk     Produk[]
}


model Produk {
  produkId        Int               @id @default(autoincrement())
  nama            String
  harga           Int
  stok            Int
  minimumStok     Int               @default(10)  // Tambahan field baru
  statusStok      String            @default("NORMAL") // NORMAL, LOW, CRITICAL
  isDeleted       Boolean           @default(false)
  image           String
  detailPenjualan DetailPenjualan[]
  kategoriId      Int
  kategori        Kategori          @relation(fields: [kategoriId], references: [kategoriId])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

