generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  level     String
  password  String
  username  String      @unique
  id        Int         @id @default(autoincrement())
  penjualan Penjualan[]
  refunds   Refund[]
}

model Pelanggan {
  pelangganId  Int         @id @default(autoincrement())
  nama         String      
  alamat       String?
  nomorTelepon String?     @unique
  points       Int         @default(0)
  createdAt    DateTime    @default(now())
  penjualan    Penjualan[]
}

model Guest {
  guestId   Int         @id @default(autoincrement())
  penjualan Penjualan[]
}

model Penjualan {
  penjualanId      Int               @id @default(autoincrement())
  total_harga      Float
  total_modal      Float?             // Total modal dari semua produk di transaksi ini
  keuntungan       Float?             // Keuntungan = total_harga - total_modal
  pelangganId      Int?
  tanggalPenjualan DateTime          @default(now())
  guestId          Int?
  userId           Int
  kembalian        Int?
  uangMasuk        Int?
  detailPenjualan  DetailPenjualan[]
  guest            Guest?            @relation(fields: [guestId], references: [guestId])
  pelanggan        Pelanggan?        @relation(fields: [pelangganId], references: [pelangganId])
  user             User              @relation(fields: [userId], references: [id])
  returns          Refund[]
}

model DetailPenjualan {
  kuantitas   Int
  subtotal    Int
  detailId    Int       @id @default(autoincrement())
  penjualanId Int
  produkId    Int
  penjualan   Penjualan @relation(fields: [penjualanId], references: [penjualanId])
  produk      Produk    @relation(fields: [produkId], references: [produkId])
}

model Kategori {
  kategoriId Int         @id @default(autoincrement())
  nama       String      @unique
  icon       String
  produk     Produk[]
  isDeleted  Boolean     @default(false)  // Tambahkan field ini
}

model Produk {
  nama            String
  harga           Int
  hargaModal      Int
  stok            Int
  produkId        Int               @id @default(autoincrement())
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  minimumStok     Int               @default(10)
  statusStok      String            @default("NORMAL")
  kategoriId      Int
  detailPenjualan DetailPenjualan[]
  detailRefund    DetailRefund[]
  kategori        Kategori          @relation(fields: [kategoriId], references: [kategoriId])
// Relasi ke promosi melalui join table
  promotionProducts PromotionProduct[]
}

model Refund {
  refundId      Int            @id @default(autoincrement())
  penjualanId   Int
  tanggalRefund DateTime       @default(now())
  totalRefund   Float
  userId        Int
  detailRefund  DetailRefund[]
  penjualan     Penjualan      @relation(fields: [penjualanId], references: [penjualanId])
  user          User           @relation(fields: [userId], references: [id])
}

model DetailRefund {
  detailRefundId Int    @id @default(autoincrement())
  refundId       Int
  produkId       Int
  kuantitas      Int
  produk         Produk @relation(fields: [produkId], references: [produkId])
  refund         Refund @relation(fields: [refundId], references: [refundId])
}


model Promotion {
  promotionId        Int           @id @default(autoincrement())
  title              String
  description        String?
  type               PromotionType
  startDate          DateTime
  endDate            DateTime
  discountPercentage Float?
  discountAmount     Float?
  minQuantity        Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
   // Hubungan ke produk via join table
  promotionProducts  PromotionProduct[]
  // Hubungan ke kategori via join table baru
}

model PromotionProduct {
  id           Int       @id @default(autoincrement())
  promotionId  Int
  produkId     Int
  // Field opsional untuk override atau validasi tambahan per produk, misalnya jika produk memiliki batas aktifnya sendiri
  activeUntil  DateTime?
  promotion    Promotion @relation(fields: [promotionId], references: [promotionId])
  produk       Produk    @relation(fields: [produkId], references: [produkId])
}




enum PromotionType {
  FLASH_SALE
  SPECIAL_DAY
  WEEKEND
  PRODUCT_SPECIFIC
  QUANTITY_BASED
}
