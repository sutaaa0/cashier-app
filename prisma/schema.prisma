generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  level     String
  password  String
  username  String      @unique
  id        Int         @id @default(autoincrement())
  penjualan Penjualan[]
  refunds   Refund[]
}

model Pelanggan {
  pelangganId  Int         @id @default(autoincrement())
  nama         String      @default("Guest")
  alamat       String?
  nomorTelepon String?
  points       Int         @default(0)
  createdAt    DateTime    @default(now())
  penjualan    Penjualan[]
}

model Guest {
  guestId   Int         @id @default(autoincrement())
  penjualan Penjualan[]
}

model Penjualan {
  penjualanId      Int               @id @default(autoincrement())
  total_harga      Float
  total_modal      Float?             // Total modal dari semua produk di transaksi ini
  keuntungan       Float?             // Keuntungan = total_harga - total_modal
  pelangganId      Int?
  tanggalPenjualan DateTime          @default(now())
  guestId          Int?
  userId           Int
  kembalian        Int?
  uangMasuk        Int?
  detailPenjualan  DetailPenjualan[]
  guest            Guest?            @relation(fields: [guestId], references: [guestId])
  pelanggan        Pelanggan?        @relation(fields: [pelangganId], references: [pelangganId])
  user             User              @relation(fields: [userId], references: [id])
  receipt          Receipt?          @relation("PenjualanReceipt")
  returns          Refund[]
}

model DetailPenjualan {
  kuantitas   Int
  subtotal    Int
  detailId    Int       @id @default(autoincrement())
  penjualanId Int
  produkId    Int
  penjualan   Penjualan @relation(fields: [penjualanId], references: [penjualanId])
  produk      Produk    @relation(fields: [produkId], references: [produkId])
}

model Kategori {
  kategoriId Int         @id @default(autoincrement())
  nama       String      @unique
  icon       String
  produk     Produk[]
  promotions Promotion[] @relation("PromotionCategories")
  isDeleted  Boolean     @default(false)  // Tambahkan field ini
}

model Produk {
  nama            String
  harga           Int
  hargaModal      Int
  stok            Int
  produkId        Int               @id @default(autoincrement())
  image           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  minimumStok     Int               @default(10)
  statusStok      String            @default("NORMAL")
  kategoriId      Int
  detailPenjualan DetailPenjualan[]
  detailRefund    DetailRefund[]
  kategori        Kategori          @relation(fields: [kategoriId], references: [kategoriId])
  promotions      Promotion[]       @relation("PromotionProducts")
}

model Refund {
  refundId      Int            @id @default(autoincrement())
  penjualanId   Int
  tanggalRefund DateTime       @default(now())
  totalRefund   Float
  userId        Int
  detailRefund  DetailRefund[]
  penjualan     Penjualan      @relation(fields: [penjualanId], references: [penjualanId])
  user          User           @relation(fields: [userId], references: [id])
}

model DetailRefund {
  detailRefundId Int    @id @default(autoincrement())
  refundId       Int
  produkId       Int
  kuantitas      Int
  produk         Produk @relation(fields: [produkId], references: [produkId])
  refund         Refund @relation(fields: [refundId], references: [refundId])
}

model Receipt {
  id            Int       @id @default(autoincrement())
  transactionId String    @unique
  penjualanId   Int       @unique
  customerName  String
  petugasId     Int
  total         Float
  pdfUrl        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  penjualan     Penjualan @relation("PenjualanReceipt", fields: [penjualanId], references: [penjualanId])
}

model Promotion {
  promotionId        Int           @id @default(autoincrement())
  title              String
  description        String?
  type               PromotionType
  startDate          DateTime
  endDate            DateTime
  discountPercentage Float?
  discountAmount     Float?
  minQuantity        Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  categories         Kategori[]    @relation("PromotionCategories")
  products           Produk[]      @relation("PromotionProducts")
}

enum PromotionType {
  FLASH_SALE
  SPECIAL_DAY
  WEEKEND
  PRODUCT_SPECIFIC
  QUANTITY_BASED
}
